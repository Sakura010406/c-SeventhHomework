using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.IO;
using System.Text.RegularExpressions;
using System.Net;
using System.Collections;
using System.Web;

namespace Cs_SeventhHomework
{
    class Program
    {
        //（（3）相对地址转成绝对地址进行爬取

        private Hashtable urls = new Hashtable();

        private int count = 0;

        static void Main(string[] args)
        {
            Program program = new Program();

            string startUrl = "http://www.cnblogs.com/dstang2000/";

            if (args.Length >= 1) startUrl = args[0];

            program.urls.Add(startUrl, false);

            new Thread(program.Prog).Start();

            Console.ReadKey();

        }

        private void Prog()
        {
            Console.WriteLine("开始爬行了.......");

            while (true)
            {
                string current = null;

                foreach (string url in urls.Keys)
                {
                    if ((bool)urls[url]) continue;

                    current = url;

                  //  current = urlConvertorLocal(url) ;


                }
                if (current == null || count >= 10) break;

                Console.WriteLine("爬行" + current + "页面");

                string html = DownLoad(current);

                Console.WriteLine(html);

                urls[current] = true;

                count++;

                Parse(html);
            }

            Console.WriteLine("爬行结束!");
        }
       
        private string DownLoad(string url)
        {
            try
            {
                WebClient webClient = new WebClient();

                webClient.Encoding = Encoding.UTF8;

                string html = webClient.DownloadString(url);



                string fileName = count.ToString();

                File.WriteAllText(fileName, html, Encoding.UTF8);

                return html;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);

                return "";
    
            }
        }

        private void Parse(string html)
        {
            string strRef = @"(href|HREF)[]*=[]*[""'][^""'#>]+[""']";

            MatchCollection matches = new Regex(strRef).Matches(html);
            
            foreach (Match match in matches)
            {
                strRef = match.Value.Substring(match.Value.IndexOf('=') + 1).Trim('=', '\"', '#', '>');

                if (strRef.Length == 0) continue;


                Uri baseUri = new Uri("http://www.cnblogs.com/dstang2000/");

                Uri absoluteUri = new Uri(baseUri, strRef);

                strRef = absoluteUri.ToString();

                if (urls[strRef] == null) urls[strRef] = false;
            }

        }

    }
}
